name: Build, test and push sim mode container
on: [push]
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Check that /dev/urandom exists
      run: ls /dev/urandom
    - name: Login to docker
      env:
        GITHUB_TOKEN: ${{ secrets.DOCKER_SECRET }}
      run: docker login -u skalelabs -p ${GITHUB_TOKEN}
    - uses: actions/checkout@v1
    - name: submodule update
      run: git submodule update --init --recursive
    - name: build container for release
      run: |
        export BRANCH=${GITHUB_REF##*/}
        echo "Branch $BRANCH"
        export VERSION=$(cat VERSION)
        echo "Version $VERSION"
        export VERSION=$(bash ./scripts/calculate_version.sh $BRANCH $VERSION sgxwalletsim)
        echo "::set-env name=VERSION::$VERSION"
        echo "Version $VERSION"
        bash ./scripts/build_image.sh DockerfileSimulation
    - name: build container for testing
      run: python3 scripts/docker_build.py DockerfileSimulation sgxwalletsim ${GITHUB_SHA}
    - name: test
      run: python3 scripts/docker_test.py ${GITHUB_REF##*/} DockerfileSimulation sgxwalletsim
    - name: deploy docker image
      #if: contains(github.ref, 'develop') || contains(github.ref, 'beta') || contains(github.ref, 'master') || contains(github.ref, 'stable')
      run : |
        export BRANCH=${GITHUB_REF##*/}
        echo "Branch $BRANCH"
        export VERSION=${env.VERSION}
        echo "::set-env name=VERSION::$VERSION"
        echo "Version $VERSION"
        export RELEASE=true
        echo "::set-env name=RELEASE::$RELEASE"
        bash ./scripts/publish_image.sh DockerfileSimulation
    - name: Create Release
      if: contains(github.ref, 'develop') || contains(github.ref, 'beta') || contains(github.ref, 'master') || contains(github.ref, 'stable')
      id: create_release
      uses: actions/create-release@latest
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        tag_name: ${{ env.VERSION }}
        release_name: Release ${{ env.VERSION }}
        body: |
          Changes in this Release
          - First Change
          - Second Change
        draft: false
        prerelease: true


