enclave {

	trusted {
		include "sgx_tgmp.h"

		public void tgmp_init();

		public void e_mpz_add(
			[user_check] mpz_t *c, [user_check] mpz_t *a, [user_check] mpz_t *b
		);

		public void e_mpz_mul(
			[user_check] mpz_t *c, [user_check] mpz_t *a, [user_check] mpz_t *b
		);

		public void e_mpz_div(
			[user_check] mpz_t *c, [user_check] mpz_t *a, [user_check] mpz_t *b
		);

		public void e_mpf_div(
			[user_check] mpf_t *c, [user_check] mpf_t *a, [user_check] mpf_t *b
		);

		public void generate_ecdsa_key (
		    [user_check] int *err_status,
		    [out, count = 1024] char* err_string,
		    [out, count = 1024] uint8_t* encrypted_key,
		    [user_check] uint32_t *enc_len,
		    [out, count = 1024] char * pub_key_x,
		    [out, count = 1024] char * pub_key_y);

		public void get_public_ecdsa_key (
        		    [user_check] int *err_status,
        		    [out, count = 1024] char* err_string,
        		    [in, count = 1024] uint8_t* encrypted_key,
        		    uint32_t dec_len,
        		    [out, count = 1024] char * pub_key_x,
        		    [out, count = 1024] char * pub_key_y);

		public void encrypt_key (
		    [user_check] int *err_status,
		    [out, count = 1024] char* err_string,
		    [in, count = 1024] char* key,
		    [out, count = 1024] uint8_t* encrypted_key, [user_check] uint32_t *enc_len);

        public void decrypt_key (
		    [user_check] int *err_status,
		    [out, count = 1024] char* err_string,
		    [in, count = 1024] uint8_t* encrypted_key,
		    uint32_t enc_len,
		    [out, count = 1024] char* key );

		public void bls_sign_message (
            		    [user_check] int *err_status,
            		    [out, count = 1024] char* err_string,
            		    [in, count = 1024] uint8_t* encrypted_key,
            		    uint32_t enc_len,
            		    [in, count = 1024] char* hashX ,
            		    [in, count = 1024] char* hashY ,
            		    [out, count = 1024] char* signature);

        public void gen_dkg_secret (
                    	[user_check] int *err_status,
                    	[out, count = 1024] char* err_string,
                    	[out, count = 2000] uint8_t* encrypted_dkg_secret,
                    	[user_check] uint32_t * enc_len,
                    	size_t _t);

        public void decrypt_dkg_secret (
                            	[user_check] int *err_status,
                            	[out, count = 1024] char* err_string,
                            	[in, count = 2000] uint8_t* encrypted_dkg_secret,
                            	[out, count = 2000] uint8_t* decrypted_dkg_secret,
                            	uint32_t enc_len);

        public void get_secret_shares (
                                [user_check] int *err_status,
                                [out, count = 1024] char* err_string,
                                [in, count = 2000] uint8_t* encrypted_dkg_secret,
                                uint32_t enc_len,
                                [out, count = 2000] char* secret_shares,
                                unsigned _t,
                                unsigned _n);

         public void get_public_shares (
                                [user_check] int *err_status,
                                [out, count = 1024] char* err_string,
                                [in, count = 2000] uint8_t* decrypted_dkg_secret,
                                uint32_t enc_len,
                                [out, count = 4000] char* public_shares,
                                unsigned _t,
                                unsigned _n);

         public void ecdsa_sign1(
                                 [user_check] int *err_status,
                                 [out, count = 1024] char* err_string,
                                 [in, count = 1024] uint8_t* encrypted_key,
                                 uint32_t enc_len,
                                 [in, count = 1024] unsigned char* hash,
                                 [out, count = 1024] char* sig_r,
                                 [out, count = 1024] char* sig_s,
                                 [user_check] uint8_t* sig_v,
                                 int base);

         public void drive_key(
                                [user_check]int *err_status,
                                [out, count = 1024] char *err_string,
                                [out, count = 1024] uint8_t *encrypted_skey,
                                [user_check]uint32_t* enc_len,
                                [out, count = 1024] char* result_str,
                                [out, count = 1024] char* pub_keyB );
	};


	untrusted {
		include "gmp.h"

		uint64_t oc_realloc([user_check] void *optr, size_t osz, size_t nsz);

		void oc_free([user_check] void *optr, size_t sz);
	};
};

